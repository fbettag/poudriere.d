diff --git apps/s_client.c apps/s_client.c
index e8038a5..e584422 100644
--- apps/s_client.c
+++ apps/s_client.c
@@ -230,6 +230,7 @@ sc_usage(void)
 	BIO_printf(bio_err, " -tls1_2       - just use TLSv1.2\n");
 	BIO_printf(bio_err, " -tls1_1       - just use TLSv1.1\n");
 	BIO_printf(bio_err, " -tls1         - just use TLSv1\n");
+	BIO_printf(bio_err, " -fallback_scsv - send TLS_FALLBACK_SCSV\n");
 	BIO_printf(bio_err, " -dtls1        - just use DTLSv1\n");
 	BIO_printf(bio_err, " -mtu          - set the link layer MTU\n");
 	BIO_printf(bio_err, " -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol\n");
@@ -378,6 +379,7 @@ s_client_main(int argc, char **argv)
 	char *sess_out = NULL;
 	struct sockaddr peer;
 	int peerlen = sizeof(peer);
+	int fallback_scsv = 0;
 	int enable_timeouts = 0;
 	long socket_mtu = 0;
 
@@ -483,6 +485,8 @@ s_client_main(int argc, char **argv)
 			meth = TLSv1_1_client_method();
 		else if (strcmp(*argv, "-tls1") == 0)
 			meth = TLSv1_client_method();
+		else if (strcmp(*argv, "-fallback_scsv") == 0)
+			fallback_scsv = 1;
 #ifndef OPENSSL_NO_DTLS1
 		else if (strcmp(*argv, "-dtls1") == 0) {
 			meth = DTLSv1_client_method();
@@ -786,6 +790,10 @@ bad:
 		SSL_set_session(con, sess);
 		SSL_SESSION_free(sess);
 	}
+
+	if (fallback_scsv)
+		SSL_set_mode(con, SSL_MODE_SEND_FALLBACK_SCSV);
+
 	if (servername != NULL) {
 		if (!SSL_set_tlsext_host_name(con, servername)) {
 			BIO_printf(bio_err, "Unable to set TLS servername extension.\n");
diff --git include/openssl/dtls1.h include/openssl/dtls1.h
index 89ed404..6dacd59 100644
--- include/openssl/dtls1.h
+++ include/openssl/dtls1.h
@@ -73,6 +73,7 @@ extern "C" {
 #endif
 
 #define DTLS1_VERSION			0xFEFF
+#define DTLS_MAX_VERSION		DTLS1_VERSION
 #define DTLS1_BAD_VER			0x0100
 
 /* lengths of messages */
diff --git include/openssl/ssl.h include/openssl/ssl.h
index 3a62695..77fd9af 100644
--- include/openssl/ssl.h
+++ include/openssl/ssl.h
@@ -609,6 +609,10 @@ struct ssl_session_st {
  * TLS only.)  "Released" buffers are put onto a free-list in the context
  * or just freed (depending on the context's setting for freelist_max_len). */
 #define SSL_MODE_RELEASE_BUFFERS 0x00000010L
+/* Send TLS_FALLBACK_SCSV in the ClientHello.
+ * To be set by applications that reconnect with a downgraded protocol
+ * version; see draft-ietf-tls-downgrade-scsv-00 for details. */
+#define SSL_MODE_SEND_FALLBACK_SCSV 0x00000020L
 
 /* Note: SSL[_CTX]_set_{options,mode} use |= op on the previous value,
  * they cannot be used to clear bits. */
@@ -1328,6 +1332,7 @@ DECLARE_PEM_rw(SSL_SESSION, SSL_SESSION)
 #define SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 #define SSL_AD_BAD_CERTIFICATE_HASH_VALUE TLS1_AD_BAD_CERTIFICATE_HASH_VALUE
 #define SSL_AD_UNKNOWN_PSK_IDENTITY     TLS1_AD_UNKNOWN_PSK_IDENTITY /* fatal */
+#define SSL_AD_INAPPROPRIATE_FALLBACK   TLS1_AD_INAPPROPRIATE_FALLBACK /* fatal */
 
 #define SSL_ERROR_NONE			0
 #define SSL_ERROR_SSL			1
@@ -1432,6 +1437,8 @@ DECLARE_PEM_rw(SSL_SESSION, SSL_SESSION)
 
 #define SSL_CTRL_SET_DH_AUTO			118
 
+#define SSL_CTRL_CHECK_PROTO_VERSION		119
+
 #define DTLSv1_get_timeout(ssl, arg) \
 	SSL_ctrl(ssl,DTLS_CTRL_GET_TIMEOUT,0, (void *)arg)
 #define DTLSv1_handle_timeout(ssl) \
@@ -2134,6 +2141,7 @@ void ERR_load_SSL_strings(void);
 #define SSL_R_HTTPS_PROXY_REQUEST			 155
 #define SSL_R_HTTP_REQUEST				 156
 #define SSL_R_ILLEGAL_PADDING				 283
+#define SSL_R_INAPPROPRIATE_FALLBACK			 373
 #define SSL_R_INCONSISTENT_COMPRESSION			 340
 #define SSL_R_INVALID_CHALLENGE_LENGTH			 158
 #define SSL_R_INVALID_COMMAND				 280
@@ -2279,6 +2287,7 @@ void ERR_load_SSL_strings(void);
 #define SSL_R_TLSV1_ALERT_DECRYPTION_FAILED		 1021
 #define SSL_R_TLSV1_ALERT_DECRYPT_ERROR			 1051
 #define SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION		 1060
+#define SSL_R_TLSV1_ALERT_INAPPROPRIATE_FALLBACK	 1086
 #define SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY		 1071
 #define SSL_R_TLSV1_ALERT_INTERNAL_ERROR		 1080
 #define SSL_R_TLSV1_ALERT_NO_RENEGOTIATION		 1100
diff --git include/openssl/ssl3.h include/openssl/ssl3.h
index 2cfb047..c7df292 100644
--- include/openssl/ssl3.h
+++ include/openssl/ssl3.h
@@ -125,9 +125,14 @@
 extern "C" {
 #endif
 
-/* Signalling cipher suite value: from draft-ietf-tls-renegotiation-03.txt */
+/* Signalling cipher suite value from RFC 5746
+ * (TLS_EMPTY_RENEGOTIATION_INFO_SCSV) */
 #define SSL3_CK_SCSV				0x030000FF
 
+/* Signalling cipher suite value from draft-ietf-tls-downgrade-scsv-00
+ * (TLS_FALLBACK_SCSV) */
+#define SSL3_CK_FALLBACK_SCSV          0x03005600
+
 #define SSL3_CK_RSA_NULL_MD5			0x03000001
 #define SSL3_CK_RSA_NULL_SHA			0x03000002
 #define SSL3_CK_RSA_RC4_40_MD5 			0x03000003
diff --git include/openssl/tls1.h include/openssl/tls1.h
index adf80fa..7cb6a0e 100644
--- include/openssl/tls1.h
+++ include/openssl/tls1.h
@@ -171,6 +171,8 @@ extern "C" {
 #define TLS1_VERSION_MAJOR		0x03
 #define TLS1_VERSION_MINOR		0x01
 
+#define TLS_MAX_VERSION		 TLS1_2_VERSION
+
 #define TLS1_get_version(s) \
 		((s->version >> 8) == TLS1_VERSION_MAJOR ? s->version : 0)
 
@@ -187,6 +189,7 @@ extern "C" {
 #define TLS1_AD_PROTOCOL_VERSION	70	/* fatal */
 #define TLS1_AD_INSUFFICIENT_SECURITY	71	/* fatal */
 #define TLS1_AD_INTERNAL_ERROR		80	/* fatal */
+#define TLS1_AD_INAPPROPRIATE_FALLBACK  86  /* fatal */
 #define TLS1_AD_USER_CANCELLED		90
 #define TLS1_AD_NO_RENEGOTIATION	100
 /* Codes 110-114 are from RFC 3546. */
diff --git ssl/d1_lib.c ssl/d1_lib.c
index 5111fcc..f4904e5 100644
--- ssl/d1_lib.c
+++ ssl/d1_lib.c
@@ -266,6 +266,16 @@ dtls1_ctrl(SSL *s, int cmd, long larg, void *parg)
 	case DTLS_CTRL_LISTEN:
 		ret = dtls1_listen(s, parg);
 		break;
+	case SSL_CTRL_CHECK_PROTO_VERSION:
+		/* For library-internal use; checks that the current protocol
+		 * is the highest enabled version (according to s->ctx->method,
+		 * as version negotiation may have changed s->method). */
+#if DTLS_MAX_VERSION != DTLS1_VERSION
+#  error Code needs update for DTLS_method() support beyond DTLS1_VERSION.
+#endif
+		/* Just one protocol version is supported so far;
+		 * fail closed if the version is not as expected. */
+		return s->version == DTLS_MAX_VERSION;
 
 	default:
 		ret = ssl3_ctrl(s, cmd, larg, parg);
diff --git ssl/s23_clnt.c ssl/s23_clnt.c
index c25cfa6..b1e82a0 100644
--- ssl/s23_clnt.c
+++ ssl/s23_clnt.c
@@ -498,6 +498,9 @@ ssl23_get_server_hello(SSL *s)
 			goto err;
 		}
 
+		/* ensure that TLS_MAX_VERSION is up-to-date */
+		OPENSSL_assert(s->version <= TLS_MAX_VERSION);
+
 		if (p[0] == SSL3_RT_ALERT && p[5] != SSL3_AL_WARNING) {
 			/* fatal alert */
 			void (*cb)(const SSL *ssl, int type, int val) = NULL;
diff --git ssl/s23_srvr.c ssl/s23_srvr.c
index a99952a..652ed30 100644
--- ssl/s23_srvr.c
+++ ssl/s23_srvr.c
@@ -261,6 +261,9 @@ end:
 int
 ssl23_get_client_hello(SSL *s)
 {
+	/* ensure that TLS_MAX_VERSION is up-to-date */
+	OPENSSL_assert(s->version <= TLS_MAX_VERSION);
+
 	char buf[11];
 	/*
 	 * sizeof(buf) == 11, because we'll need to request this many bytes in
diff --git ssl/s3_enc.c ssl/s3_enc.c
index 0247b20..b3d7c9f 100644
--- ssl/s3_enc.c
+++ ssl/s3_enc.c
@@ -833,6 +833,8 @@ ssl3_alert_code(int code)
 		return (SSL3_AD_HANDSHAKE_FAILURE);
 	case SSL_AD_UNKNOWN_PSK_IDENTITY:
 		return (TLS1_AD_UNKNOWN_PSK_IDENTITY);
+	case SSL_AD_INAPPROPRIATE_FALLBACK:
+		return (TLS1_AD_INAPPROPRIATE_FALLBACK);
 	default:
 		return (-1);
 	}
diff --git ssl/s3_lib.c ssl/s3_lib.c
index 03f7af8..b9a5161 100644
--- ssl/s3_lib.c
+++ ssl/s3_lib.c
@@ -2143,6 +2143,32 @@ ssl3_ctrl(SSL *s, int cmd, long larg, void *parg)
 		ret = 1;
 		break;
 
+	case SSL_CTRL_CHECK_PROTO_VERSION:
+		/* For library-internal use; checks that the current protocol
+		 * is the highest enabled version (according to s->ctx->method,
+		 * as version negotiation may have changed s->method). */
+		if (s->version == s->ctx->method->version)
+			ret = 1;
+		/* Apparently we're using a version-flexible SSL_METHOD
+		 * (not at its highest protocol version). */
+		else if (s->ctx->method->version == SSLv23_method()->version) {
+#if TLS_MAX_VERSION != TLS1_2_VERSION
+#  error Code needs update for SSLv23_method() support beyond TLS1_2_VERSION.
+#endif
+			if (!(s->options & SSL_OP_NO_TLSv1_2))
+				ret = (s->version == TLS1_2_VERSION);
+			else if (!(s->options & SSL_OP_NO_TLSv1_1))
+				ret = (s->version == TLS1_1_VERSION);
+			else if (!(s->options & SSL_OP_NO_TLSv1))
+				ret = (s->version == TLS1_VERSION);
+			else if (!(s->options & SSL_OP_NO_SSLv3))
+				ret = (s->version == SSL3_VERSION);
+			else if (!(s->options & SSL_OP_NO_SSLv2))
+				ret = (s->version == SSL2_VERSION);
+		}
+		else
+			ret = 0; /* Unexpected state; fail closed. */
+
 	default:
 		break;
 	}
diff --git ssl/ssl_err.c ssl/ssl_err.c
index 7fd1dfc..17fe209 100644
--- ssl/ssl_err.c
+++ ssl/ssl_err.c
@@ -385,6 +385,7 @@ static ERR_STRING_DATA SSL_str_reasons[]= {
 	{ERR_REASON(SSL_R_HTTPS_PROXY_REQUEST)   , "https proxy request"},
 	{ERR_REASON(SSL_R_HTTP_REQUEST)          , "http request"},
 	{ERR_REASON(SSL_R_ILLEGAL_PADDING)       , "illegal padding"},
+	{ERR_REASON(SSL_R_INAPPROPRIATE_FALLBACK),"inappropriate fallback"},
 	{ERR_REASON(SSL_R_INCONSISTENT_COMPRESSION), "inconsistent compression"},
 	{ERR_REASON(SSL_R_INVALID_CHALLENGE_LENGTH), "invalid challenge length"},
 	{ERR_REASON(SSL_R_INVALID_COMMAND)       , "invalid command"},
@@ -530,6 +531,7 @@ static ERR_STRING_DATA SSL_str_reasons[]= {
 	{ERR_REASON(SSL_R_TLSV1_ALERT_DECRYPTION_FAILED), "tlsv1 alert decryption failed"},
 	{ERR_REASON(SSL_R_TLSV1_ALERT_DECRYPT_ERROR), "tlsv1 alert decrypt error"},
 	{ERR_REASON(SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION), "tlsv1 alert export restriction"},
+	{ERR_REASON(SSL_R_TLSV1_ALERT_INAPPROPRIATE_FALLBACK),"tlsv1 alert inappropriate fallback"},
 	{ERR_REASON(SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY), "tlsv1 alert insufficient security"},
 	{ERR_REASON(SSL_R_TLSV1_ALERT_INTERNAL_ERROR), "tlsv1 alert internal error"},
 	{ERR_REASON(SSL_R_TLSV1_ALERT_NO_RENEGOTIATION), "tlsv1 alert no renegotiation"},
diff --git ssl/ssl_lib.c ssl/ssl_lib.c
index 481f2f5..a94951d 100644
--- ssl/ssl_lib.c
+++ ssl/ssl_lib.c
@@ -1390,15 +1390,22 @@ ssl_cipher_list_to_bytes(SSL *s, STACK_OF(SSL_CIPHER) *sk, unsigned char *p)
 		s2n(ssl3_cipher_get_value(c), p);
 	}
 
-	/*
-	 * If p == q, no ciphers and caller indicates an error. Otherwise
-	 * add SCSV if not renegotiating.
-	 */
-	if (p != q && !s->renegotiate) {
-		static SSL_CIPHER scsv = {
-			0, NULL, SSL3_CK_SCSV, 0, 0, 0, 0, 0, 0, 0, 0, 0
-		};
-		s2n(ssl3_cipher_get_value(&scsv), p);
+	/* If p == q, no ciphers; caller indicates an error.
+	 * Otherwise, add applicable SCSVs. */
+	if (p != q) {
+		if (!s->renegotiate) {
+			static SSL_CIPHER scsv = {
+				0, NULL, SSL3_CK_SCSV, 0, 0, 0, 0, 0, 0, 0, 0, 0
+			};
+			s2n(ssl3_cipher_get_value(&scsv), p);
+		}
+
+		if (s->mode & SSL_MODE_SEND_FALLBACK_SCSV) {
+			static SSL_CIPHER scsv = {
+				0, NULL, SSL3_CK_FALLBACK_SCSV, 0, 0, 0, 0, 0, 0, 0, 0, 0
+			};
+			s2n(ssl3_cipher_get_value(&scsv), p);
+		}
 	}
 
 	return (p - q);
@@ -1435,7 +1442,7 @@ ssl_bytes_to_cipher_list(SSL *s, unsigned char *p, int num,
 		n2s(p, cipher_value);
 		cipher_id = SSL3_CK_ID | cipher_value;
 
-		/* Check for SCSV */
+		/* Check for TLS_EMPTY_RENEGOTIATION_INFO_SCSV */
 		if (s->s3 && cipher_id == SSL3_CK_SCSV) {
 			/* SCSV is fatal if renegotiating. */
 			if (s->renegotiate) {
@@ -1450,6 +1457,19 @@ ssl_bytes_to_cipher_list(SSL *s, unsigned char *p, int num,
 			continue;
 		}
 
+		/* Check for TLS_FALLBACK_SCSV */
+		if (cipher_id == SSL3_CK_FALLBACK_SCSV) {
+			if (!SSL_ctrl(s, SSL_CTRL_CHECK_PROTO_VERSION, 0, NULL)) {
+				SSLerr(SSL_F_SSL_BYTES_TO_CIPHER_LIST, SSL_R_INAPPROPRIATE_FALLBACK);
+
+				if (s->s3)
+					ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INAPPROPRIATE_FALLBACK);
+
+				goto err;
+			}
+			continue;
+		}
+
 		c = ssl3_get_cipher_by_id(cipher_id);
 		if (c != NULL) {
 			if (!sk_SSL_CIPHER_push(sk, c)) {
diff --git ssl/t1_enc.c ssl/t1_enc.c
index 96268e8..aa07e8c 100644
--- ssl/t1_enc.c
+++ ssl/t1_enc.c
@@ -1241,6 +1241,8 @@ tls1_alert_code(int code)
 		return (TLS1_AD_BAD_CERTIFICATE_HASH_VALUE);
 	case SSL_AD_UNKNOWN_PSK_IDENTITY:
 		return (TLS1_AD_UNKNOWN_PSK_IDENTITY);
+	case SSL_AD_INAPPROPRIATE_FALLBACK:
+		return(TLS1_AD_INAPPROPRIATE_FALLBACK);
 	default:
 		return (-1);
 	}
