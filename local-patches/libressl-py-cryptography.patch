diff --git cryptography/hazmat/bindings/__pycache__/_Cryptography_cffi_4ed9e37dx4000d087.c cryptography/hazmat/bindings/__pycache__/_Cryptography_cffi_4ed9e37dx4000d087.c
index 0e4f603..0cb5b71 100644
--- cryptography/hazmat/bindings/__pycache__/_Cryptography_cffi_4ed9e37dx4000d087.c
+++ cryptography/hazmat/bindings/__pycache__/_Cryptography_cffi_4ed9e37dx4000d087.c
@@ -527,7 +527,6 @@ int ENGINE_init(ENGINE *);
 int ENGINE_finish(ENGINE *);
 void ENGINE_load_openssl(void);
 void ENGINE_load_dynamic(void);
-void ENGINE_load_cryptodev(void);
 void ENGINE_load_builtin_engines(void);
 void ENGINE_cleanup(void);
 ENGINE *ENGINE_get_default_RSA(void);
@@ -828,9 +827,6 @@ void ERR_load_RAND_strings(void);
 void RAND_seed(const void *, int);
 void RAND_add(const void *, int, double);
 int RAND_status(void);
-int RAND_egd(const char *);
-int RAND_egd_bytes(const char *, int);
-int RAND_query_egd_bytes(const char *, unsigned char *, int);
 const char *RAND_file_name(char *, size_t);
 int RAND_load_file(const char *, long);
 int RAND_write_file(const char *);
@@ -902,10 +898,6 @@ int SSL_shutdown(SSL *);
 const char *SSL_get_cipher_list(const SSL *, int);
 Cryptography_STACK_OF_SSL_CIPHER *SSL_get_ciphers(const SSL *);
 
-const COMP_METHOD *SSL_get_current_compression(SSL *);
-const COMP_METHOD *SSL_get_current_expansion(SSL *);
-const char *SSL_COMP_get_name(const COMP_METHOD *);
-
 /*  context */
 void SSL_CTX_free(SSL_CTX *);
 long SSL_CTX_set_timeout(SSL_CTX *, long);
@@ -29262,20 +29254,6 @@ _cffi_f_ENGINE_load_builtin_engines(PyObject *self, PyObject *no_arg)
 }
 
 static PyObject *
-_cffi_f_ENGINE_load_cryptodev(PyObject *self, PyObject *no_arg)
-{
-
-  Py_BEGIN_ALLOW_THREADS
-  _cffi_restore_errno();
-  { ENGINE_load_cryptodev(); }
-  _cffi_save_errno();
-  Py_END_ALLOW_THREADS
-
-  Py_INCREF(Py_None);
-  return Py_None;
-}
-
-static PyObject *
 _cffi_f_ENGINE_load_dynamic(PyObject *self, PyObject *no_arg)
 {
 
@@ -38350,70 +38328,6 @@ _cffi_f_RAND_cleanup(PyObject *self, PyObject *no_arg)
 }
 
 static PyObject *
-_cffi_f_RAND_egd(PyObject *self, PyObject *arg0)
-{
-  char const * x0;
-  Py_ssize_t datasize;
-  int result;
-
-  datasize = _cffi_prepare_pointer_call_argument(
-      _cffi_type(0), arg0, (char **)&x0);
-  if (datasize != 0) {
-    if (datasize < 0)
-      return NULL;
-    x0 = alloca(datasize);
-    memset((void *)x0, 0, datasize);
-    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(0), arg0) < 0)
-      return NULL;
-  }
-
-  Py_BEGIN_ALLOW_THREADS
-  _cffi_restore_errno();
-  { result = RAND_egd(x0); }
-  _cffi_save_errno();
-  Py_END_ALLOW_THREADS
-
-  return _cffi_from_c_int(result, int);
-}
-
-static PyObject *
-_cffi_f_RAND_egd_bytes(PyObject *self, PyObject *args)
-{
-  char const * x0;
-  int x1;
-  Py_ssize_t datasize;
-  int result;
-  PyObject *arg0;
-  PyObject *arg1;
-
-  if (!PyArg_ParseTuple(args, "OO:RAND_egd_bytes", &arg0, &arg1))
-    return NULL;
-
-  datasize = _cffi_prepare_pointer_call_argument(
-      _cffi_type(0), arg0, (char **)&x0);
-  if (datasize != 0) {
-    if (datasize < 0)
-      return NULL;
-    x0 = alloca(datasize);
-    memset((void *)x0, 0, datasize);
-    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(0), arg0) < 0)
-      return NULL;
-  }
-
-  x1 = _cffi_to_c_int(arg1, int);
-  if (x1 == (int)-1 && PyErr_Occurred())
-    return NULL;
-
-  Py_BEGIN_ALLOW_THREADS
-  _cffi_restore_errno();
-  { result = RAND_egd_bytes(x0, x1); }
-  _cffi_save_errno();
-  Py_END_ALLOW_THREADS
-
-  return _cffi_from_c_int(result, int);
-}
-
-static PyObject *
 _cffi_f_RAND_file_name(PyObject *self, PyObject *args)
 {
   char * x0;
@@ -38525,56 +38439,6 @@ _cffi_f_RAND_pseudo_bytes(PyObject *self, PyObject *args)
 }
 
 static PyObject *
-_cffi_f_RAND_query_egd_bytes(PyObject *self, PyObject *args)
-{
-  char const * x0;
-  unsigned char * x1;
-  int x2;
-  Py_ssize_t datasize;
-  int result;
-  PyObject *arg0;
-  PyObject *arg1;
-  PyObject *arg2;
-
-  if (!PyArg_ParseTuple(args, "OOO:RAND_query_egd_bytes", &arg0, &arg1, &arg2))
-    return NULL;
-
-  datasize = _cffi_prepare_pointer_call_argument(
-      _cffi_type(0), arg0, (char **)&x0);
-  if (datasize != 0) {
-    if (datasize < 0)
-      return NULL;
-    x0 = alloca(datasize);
-    memset((void *)x0, 0, datasize);
-    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(0), arg0) < 0)
-      return NULL;
-  }
-
-  datasize = _cffi_prepare_pointer_call_argument(
-      _cffi_type(2), arg1, (char **)&x1);
-  if (datasize != 0) {
-    if (datasize < 0)
-      return NULL;
-    x1 = alloca(datasize);
-    memset((void *)x1, 0, datasize);
-    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(2), arg1) < 0)
-      return NULL;
-  }
-
-  x2 = _cffi_to_c_int(arg2, int);
-  if (x2 == (int)-1 && PyErr_Occurred())
-    return NULL;
-
-  Py_BEGIN_ALLOW_THREADS
-  _cffi_restore_errno();
-  { result = RAND_query_egd_bytes(x0, x1, x2); }
-  _cffi_save_errno();
-  Py_END_ALLOW_THREADS
-
-  return _cffi_from_c_int(result, int);
-}
-
-static PyObject *
 _cffi_f_RAND_seed(PyObject *self, PyObject *args)
 {
   void const * x0;
@@ -39641,33 +39505,6 @@ _cffi_f_SSL_CIPHER_get_version(PyObject *self, PyObject *arg0)
 }
 
 static PyObject *
-_cffi_f_SSL_COMP_get_name(PyObject *self, PyObject *arg0)
-{
-  COMP_METHOD const * x0;
-  Py_ssize_t datasize;
-  char const * result;
-
-  datasize = _cffi_prepare_pointer_call_argument(
-      _cffi_type(133), arg0, (char **)&x0);
-  if (datasize != 0) {
-    if (datasize < 0)
-      return NULL;
-    x0 = alloca(datasize);
-    memset((void *)x0, 0, datasize);
-    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(133), arg0) < 0)
-      return NULL;
-  }
-
-  Py_BEGIN_ALLOW_THREADS
-  _cffi_restore_errno();
-  { result = SSL_COMP_get_name(x0); }
-  _cffi_save_errno();
-  Py_END_ALLOW_THREADS
-
-  return _cffi_from_c_pointer((char *)result, _cffi_type(0));
-}
-
-static PyObject *
 _cffi_f_SSL_CTX_add_client_CA(PyObject *self, PyObject *args)
 {
   SSL_CTX * x0;
@@ -41512,60 +41349,6 @@ _cffi_f_SSL_get_current_cipher(PyObject *self, PyObject *arg0)
 }
 
 static PyObject *
-_cffi_f_SSL_get_current_compression(PyObject *self, PyObject *arg0)
-{
-  SSL * x0;
-  Py_ssize_t datasize;
-  COMP_METHOD const * result;
-
-  datasize = _cffi_prepare_pointer_call_argument(
-      _cffi_type(144), arg0, (char **)&x0);
-  if (datasize != 0) {
-    if (datasize < 0)
-      return NULL;
-    x0 = alloca(datasize);
-    memset((void *)x0, 0, datasize);
-    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(144), arg0) < 0)
-      return NULL;
-  }
-
-  Py_BEGIN_ALLOW_THREADS
-  _cffi_restore_errno();
-  { result = SSL_get_current_compression(x0); }
-  _cffi_save_errno();
-  Py_END_ALLOW_THREADS
-
-  return _cffi_from_c_pointer((char *)result, _cffi_type(133));
-}
-
-static PyObject *
-_cffi_f_SSL_get_current_expansion(PyObject *self, PyObject *arg0)
-{
-  SSL * x0;
-  Py_ssize_t datasize;
-  COMP_METHOD const * result;
-
-  datasize = _cffi_prepare_pointer_call_argument(
-      _cffi_type(144), arg0, (char **)&x0);
-  if (datasize != 0) {
-    if (datasize < 0)
-      return NULL;
-    x0 = alloca(datasize);
-    memset((void *)x0, 0, datasize);
-    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(144), arg0) < 0)
-      return NULL;
-  }
-
-  Py_BEGIN_ALLOW_THREADS
-  _cffi_restore_errno();
-  { result = SSL_get_current_expansion(x0); }
-  _cffi_save_errno();
-  Py_END_ALLOW_THREADS
-
-  return _cffi_from_c_pointer((char *)result, _cffi_type(133));
-}
-
-static PyObject *
 _cffi_f_SSL_get_error(PyObject *self, PyObject *args)
 {
   SSL const * x0;
@@ -51561,7 +51344,6 @@ static PyMethodDef _cffi_methods[] = {
   {"ENGINE_get_table_flags", _cffi_f_ENGINE_get_table_flags, METH_NOARGS},
   {"ENGINE_init", _cffi_f_ENGINE_init, METH_O},
   {"ENGINE_load_builtin_engines", _cffi_f_ENGINE_load_builtin_engines, METH_NOARGS},
-  {"ENGINE_load_cryptodev", _cffi_f_ENGINE_load_cryptodev, METH_NOARGS},
   {"ENGINE_load_dynamic", _cffi_f_ENGINE_load_dynamic, METH_NOARGS},
   {"ENGINE_load_openssl", _cffi_f_ENGINE_load_openssl, METH_NOARGS},
   {"ENGINE_load_private_key", _cffi_f_ENGINE_load_private_key, METH_VARARGS},
@@ -51797,12 +51579,9 @@ static PyMethodDef _cffi_methods[] = {
   {"RAND_add", _cffi_f_RAND_add, METH_VARARGS},
   {"RAND_bytes", _cffi_f_RAND_bytes, METH_VARARGS},
   {"RAND_cleanup", _cffi_f_RAND_cleanup, METH_NOARGS},
-  {"RAND_egd", _cffi_f_RAND_egd, METH_O},
-  {"RAND_egd_bytes", _cffi_f_RAND_egd_bytes, METH_VARARGS},
   {"RAND_file_name", _cffi_f_RAND_file_name, METH_VARARGS},
   {"RAND_load_file", _cffi_f_RAND_load_file, METH_VARARGS},
   {"RAND_pseudo_bytes", _cffi_f_RAND_pseudo_bytes, METH_VARARGS},
-  {"RAND_query_egd_bytes", _cffi_f_RAND_query_egd_bytes, METH_VARARGS},
   {"RAND_seed", _cffi_f_RAND_seed, METH_VARARGS},
   {"RAND_status", _cffi_f_RAND_status, METH_NOARGS},
   {"RAND_write_file", _cffi_f_RAND_write_file, METH_O},
diff --git cryptography/hazmat/bindings/openssl/engine.py cryptography/hazmat/bindings/openssl/engine.py
index 364232e..10370a2 100644
--- cryptography/hazmat/bindings/openssl/engine.py
+++ cryptography/hazmat/bindings/openssl/engine.py
@@ -58,7 +58,6 @@ int ENGINE_init(ENGINE *);
 int ENGINE_finish(ENGINE *);
 void ENGINE_load_openssl(void);
 void ENGINE_load_dynamic(void);
-void ENGINE_load_cryptodev(void);
 void ENGINE_load_builtin_engines(void);
 void ENGINE_cleanup(void);
 ENGINE *ENGINE_get_default_RSA(void);
diff --git cryptography/hazmat/bindings/openssl/rand.py cryptography/hazmat/bindings/openssl/rand.py
index 7b1be9d..3070fa8 100644
--- cryptography/hazmat/bindings/openssl/rand.py
+++ cryptography/hazmat/bindings/openssl/rand.py
@@ -25,9 +25,6 @@ void ERR_load_RAND_strings(void);
 void RAND_seed(const void *, int);
 void RAND_add(const void *, int, double);
 int RAND_status(void);
-int RAND_egd(const char *);
-int RAND_egd_bytes(const char *, int);
-int RAND_query_egd_bytes(const char *, unsigned char *, int);
 const char *RAND_file_name(char *, size_t);
 int RAND_load_file(const char *, long);
 int RAND_write_file(const char *);
diff --git cryptography/hazmat/bindings/openssl/ssl.py cryptography/hazmat/bindings/openssl/ssl.py
index 7d805e7..70f996c 100644
--- cryptography/hazmat/bindings/openssl/ssl.py
+++ cryptography/hazmat/bindings/openssl/ssl.py
@@ -157,7 +157,6 @@ static const long TLSEXT_NAMETYPE_host_name;
 
 typedef ... SSL_CIPHER;
 typedef ... Cryptography_STACK_OF_SSL_CIPHER;
-typedef ... COMP_METHOD;
 """
 
 FUNCTIONS = """
@@ -197,10 +196,6 @@ int SSL_shutdown(SSL *);
 const char *SSL_get_cipher_list(const SSL *, int);
 Cryptography_STACK_OF_SSL_CIPHER *SSL_get_ciphers(const SSL *);
 
-const COMP_METHOD *SSL_get_current_compression(SSL *);
-const COMP_METHOD *SSL_get_current_expansion(SSL *);
-const char *SSL_COMP_get_name(const COMP_METHOD *);
-
 /*  context */
 void SSL_CTX_free(SSL_CTX *);
 long SSL_CTX_set_timeout(SSL_CTX *, long);
-- 
2.2.1

